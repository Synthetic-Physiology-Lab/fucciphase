from enum import Enum
from pathlib import Path
from typing import List, Union

import pandas as pd


class MandatoryColumns(str, Enum):
    """Mandatory columns in the input files."""

    MEAN_INTENSITY_CH3 = "MEAN_INTENSITY_CH3"
    MEAN_INTENSITY_CH4 = "MEAN_INTENSITY_CH4"

    @classmethod
    def list(cls) -> List[str]:
        """Return a list of all mandatory columns.

        Returns
        -------
        List[str]
            List of mandatory columns.
        """
        return [col.value for col in cls]


class GeneratedColumns(str, Enum):
    """Columns generated by the analysis."""

    MEAN_INTENSITY_CH3_NORM = "MEAN_INTENSITY_CH3_NORM"
    MEAN_INTENSITY_CH4_NORM = "MEAN_INTENSITY_CH4_NORM"
    MEAN_INTENSITY_UNIQUE_VALUE = "MEAN_INTENSITY_UNIQUE_VALUE"
    PHASE = "PHASE"
    MANUAL_SPOT_COLOR = "MANUAL_SPOT_COLOR"


def read_trackmate_csv(csv_path: Union[Path, str]) -> pd.DataFrame:
    """Read a trackmate exported csv file.

    The first three rows (excluding header) of the csv file are skipped as
    they contain duplicate titles of columns and units (Trackmate specific).


    Parameters
    ----------
    csv_path : str
        Path to the csv file.

    Returns
    -------
    df : pandas.DataFrame
        Dataframe containing the csv data.

    Raises
    ------
    ValueError
        If the csv file does not contain all mandatory columns.
    """
    df = pd.read_csv(csv_path, encoding="unicode_escape", skiprows=[1, 2, 3])

    # check that all mandatory columns are present
    for col in MandatoryColumns.list():
        if col not in df.columns:
            raise ValueError(f"Column {col} not found in {csv_path}")

    # return dataframe with converted types (object -> string)
    return df.convert_dtypes()
