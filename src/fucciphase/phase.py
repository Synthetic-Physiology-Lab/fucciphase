from enum import Enum
from typing import List

import numpy as np
import pandas as pd

from .utils import get_norm_channel_name, norm

# TODO phase determination
# TODO rename channels w respect to their color, e.g. low_wavelength, high_wavelength


class NewColumns(str, Enum):
    """Columns generated by the analysis.


    Attributes
    ----------
    CELL_CYCLE_PERC : str
        Unique cell cycle percentage value
    MANUAL_SPOT_COLOR : str
        Color indexing
    PHASE : str
        Phase of the cell cycle
    """

    CELL_CYCLE_PERC = "CELL_CYCLE_PERC"
    MANUAL_SPOT_COLOR = "MANUAL_SPOT_COLOR"
    PHASE = "PHASE"

    @staticmethod
    def cell_cycle() -> str:
        """Return the name of the unique intensity column."""
        return NewColumns.CELL_CYCLE_PERC.value

    @staticmethod
    def phase() -> str:
        """Return the name of the phase column."""
        return NewColumns.PHASE.value

    @staticmethod
    def color() -> str:
        """Return the name of the color column."""
        return NewColumns.MANUAL_SPOT_COLOR.value


def compute_cell_cycle(df: pd.DataFrame, channel1: str, channel2: str) -> List[str]:
    """Compute a unique cell cycle percentage value using two channels, as well as
    a color indexing. The corresponding columns are added in place in the dataframe.

    The unique intensity is computed as the normalised angle in polar space (channel1,
    channel 2). The two channels must have been normalised before using
    fucciphase.utils.normalize_channels().

    Parameters
    ----------
    df : pd.DataFrame
        Dataframe
    channel1 : str
        First channel
    channel2 : str
        Second channel

    Returns
    -------
    List[str]
        The names of the new columns in the dataframe

    Raises
    ------
    ValueError
        If the dataframe does not contain the normalized channels.
    """
    # sanity check: check that the normalized channels are present
    for channel in [channel1, channel2]:
        if get_norm_channel_name(channel) not in df.columns:
            raise ValueError(
                f"Column {get_norm_channel_name(channel)} not found, call "
                f"normalize_channel({channel}) on the dataframe."
            )

    # get normalized channel names
    channel1_norm = get_norm_channel_name(channel1)
    channel2_norm = get_norm_channel_name(channel2)

    # compute cosine and sine
    cos_ch1 = np.cos(df[channel1_norm])
    sin_ch2 = np.sin(df[channel2_norm])

    # compute normalised unified intensity
    unified_intensity = norm(np.arctan2(sin_ch2, cos_ch1))

    # compute color (following java plugin) # TODO revisit
    color = np.rint((256**2 + 256 + 1) * 255 * unified_intensity - 256**3)

    # update the dataframe
    df[NewColumns.cell_cycle()] = unified_intensity
    df[NewColumns.color()] = pd.Series(color, dtype=int)  # make sure we add it as int

    return [
        NewColumns.cell_cycle(),
        NewColumns.color(),
    ]


def generate_cycle_phases(
    df: pd.DataFrame, phases: List[str], thresholds: List[float]
) -> None:
    """Add a column in place to the dataframe with the phase of the cell cycle, where
    the phase is determined using a threshold on the cell cycle percentage.

    The dataframe must have been previously processed using the compute_cell_cycle()
    function.

    The thresholds must be between 0 and 1, 1 excluded, and must be unique. Each
    threshold is the upper bound for the corresponding phase, the last phase being the
    one attributed to values larger than all thresholds.

    Example:
        phases = ["EG1", "G1", "T", "G2M"]
        threshold = [0.04, 0.4, 0.56]

    TODO: indications on how to determine the thresholds experimentally.

    Parameters
    ----------
    df : pd.DataFrame
        Dataframe with a CELL_CYCLE_PERC column
    phases : List[str]
        List of phases corresponding to the thresholds
    thresholds : List[float]
        List of cell cycle percentage thresholds, must be between 0 and 1.

    Raises
    ------
    ValueError
        If the CELL_CYCLE_PERC column is missing
    ValueError
        If the number of phases and thresholds do not match (one more phase expected)
    ValueError
        If the thresholds are not unique
    ValueError
        If the phases are not unique
    ValueError
        If the thresholds are not between 0 and 1, one excluded
    """
    # check that the cell cycle column is present
    if NewColumns.cell_cycle() not in df.columns:
        raise ValueError(
            f"Column {NewColumns.cell_cycle()} not found, call "
            f"compute_cell_cycle() on the dataframe."
        )

    # check that the number of phases and thresholds match
    if len(phases) != len(thresholds) + 1:
        raise ValueError(
            f"There must be one more phase than thresholds (got {len(phases)} for "
            f"{len(thresholds)} thresholds)."
        )

    # check that all thresholds are unique
    if len(thresholds) != len(set(thresholds)):
        raise ValueError("Thresholds must be unique.")

    # check that all phases are unique
    if len(phases) != len(set(phases)):
        raise ValueError("Phases must be unique.")

    # check that the thresholds are between 0 and 1
    if not all(0 < t < 1 for t in thresholds):
        raise ValueError("Thresholds must be between 0 and 1.")

    # sort the thresholds and phases by increasing threshold
    # in case they are given in the wrong order
    # sort according to the thresholds:
    sorted_phases = [x for _, x in sorted(zip(thresholds, phases[:-1]))]
    sorted_phases.append(phases[-1])  # add the last element back

    sorted_thresholds = sorted(thresholds)

    # add 1 since the thresholds will be used as bin edges
    sorted_thresholds = [0, *list(sorted_thresholds), 1.1]

    # get the cell cycle column
    cell_cycle = df[NewColumns.cell_cycle()]

    # compute a new column with the phases, each phase attributed using the
    # thresholds on the cell cycle value
    df[NewColumns.phase()] = pd.cut(
        cell_cycle, bins=sorted_thresholds, labels=sorted_phases, right=False
    )
