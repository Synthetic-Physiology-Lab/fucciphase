from enum import Enum
from typing import List

import numpy as np
import pandas as pd

from .utils import get_norm_channel_name, norm

# TODO moving avg
# TODO phase determination
# TODO pass mim/max
# TODO new gray value
# TODO fix windows CI


class NewColumns(str, Enum):
    """Columns generated by the analysis."""

    MEAN_INTENSITY_UNIQUE_VALUE = "MEAN_INTENSITY_UNIQUE_VALUE"
    PHASE = "PHASE"
    MANUAL_SPOT_COLOR = "MANUAL_SPOT_COLOR"

    @staticmethod
    def unified_intensity() -> str:
        """Return the name of the unique intensity column."""
        return NewColumns.MEAN_INTENSITY_UNIQUE_VALUE.value

    @staticmethod
    def phase() -> str:
        """Return the name of the phase column."""
        return NewColumns.PHASE.value

    @staticmethod
    def color() -> str:
        """Return the name of the color column."""
        return NewColumns.MANUAL_SPOT_COLOR.value


def compute_phase_trigo(df: pd.DataFrame, channel1: str, channel2: str) -> List[str]:
    """Compute a unique intensity, phase and color using the two channels and
    add the corresponding columns in place in the dataframe.

    The unique intensity is computed as the normalised angle between the normalised
    intensity on a circle.

    Parameters
    ----------
    df : pd.DataFrame
        Dataframe
    channel1 : str
        First channel
    channel2 : str
        Second channel

    Returns
    -------
    List[str]
        The names of the new columns in the dataframe

    Raises
    ------
    ValueError
        If the dataframe does not contain the normalized channels.
    """
    # sanity check: check that the normalized channels are present
    for channel in [channel1, channel2]:
        if get_norm_channel_name(channel) not in df.columns:
            raise ValueError(
                f"Column {get_norm_channel_name(channel)} not found, call "
                f"normalize_channel({channel}) on the dataframe."
            )

    # get normalized channel names
    channel1_norm = get_norm_channel_name(channel1)
    channel2_norm = get_norm_channel_name(channel2)

    # compute cosine and sine
    cos_ch1 = np.cos(df[channel1_norm])
    sin_ch2 = np.sin(df[channel2_norm])

    # compute normalised unified intensity
    unified_intensity = norm(np.arctan2(sin_ch2, cos_ch1))

    # compute color (following java plugin) # TODO revisit
    color = np.rint((256**2 + 256 + 1) * 255 * unified_intensity - 256**3)

    # update the dataframe
    df[NewColumns.unified_intensity()] = unified_intensity
    df[NewColumns.color()] = pd.Series(color, dtype=int)  # make sure we add it as int

    return [
        NewColumns.unified_intensity(),
        NewColumns.color(),
    ]
