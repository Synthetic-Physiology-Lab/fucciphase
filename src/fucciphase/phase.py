from enum import Enum
from typing import List

import numpy as np
import pandas as pd

from .utils import get_norm_channel_name, norm

# TODO phase determination
# TODO rename channels w respect to their color, e.g. low_wavelength, high_wavelength


class NewColumns(str, Enum):
    """Columns generated by the analysis.


    Attributes
    ----------
    CELL_CYCLE_PERC : str
        Unique cell cycle percentage value
    MANUAL_SPOT_COLOR : str
        Color indexing
    PHASE : str
        Phase of the cell cycle
    """

    CELL_CYCLE_PERC = "CELL_CYCLE_PERC"
    MANUAL_SPOT_COLOR = "MANUAL_SPOT_COLOR"
    PHASE = "PHASE"

    @staticmethod
    def cell_cycle() -> str:
        """Return the name of the unique intensity column."""
        return NewColumns.CELL_CYCLE_PERC.value

    @staticmethod
    def phase() -> str:
        """Return the name of the phase column."""
        return NewColumns.PHASE.value

    @staticmethod
    def color() -> str:
        """Return the name of the color column."""
        return NewColumns.MANUAL_SPOT_COLOR.value


def compute_cell_cycle(df: pd.DataFrame, channel1: str, channel2: str) -> List[str]:
    """Compute a unique cell cycle percentage value using two channels, as well as
    a color indexing. The corresponding columns are added in place in the dataframe.

    The unique intensity is computed as the normalised angle in polar space (channel1,
    channel 2). The two channels must have been normalised before using
    fucciphase.utils.normalize_channels().

    Parameters
    ----------
    df : pd.DataFrame
        Dataframe
    channel1 : str
        First channel
    channel2 : str
        Second channel

    Returns
    -------
    List[str]
        The names of the new columns in the dataframe

    Raises
    ------
    ValueError
        If the dataframe does not contain the normalized channels.
    """
    # sanity check: check that the normalized channels are present
    for channel in [channel1, channel2]:
        if get_norm_channel_name(channel) not in df.columns:
            raise ValueError(
                f"Column {get_norm_channel_name(channel)} not found, call "
                f"normalize_channel({channel}) on the dataframe."
            )

    # get normalized channel names
    channel1_norm = get_norm_channel_name(channel1)
    channel2_norm = get_norm_channel_name(channel2)

    # compute cosine and sine
    cos_ch1 = np.cos(df[channel1_norm])
    sin_ch2 = np.sin(df[channel2_norm])

    # compute normalised unified intensity
    unified_intensity = norm(np.arctan2(sin_ch2, cos_ch1))

    # compute color (following java plugin) # TODO revisit
    color = np.rint((256**2 + 256 + 1) * 255 * unified_intensity - 256**3)

    # update the dataframe
    df[NewColumns.cell_cycle()] = unified_intensity
    df[NewColumns.color()] = pd.Series(color, dtype=int)  # make sure we add it as int

    return [
        NewColumns.cell_cycle(),
        NewColumns.color(),
    ]
