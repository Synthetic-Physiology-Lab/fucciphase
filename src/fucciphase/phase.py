from enum import Enum
from typing import List

import pandas as pd

from .sensor import FUCCISensor
from .utils import get_norm_channel_name


class NewColumns(str, Enum):
    """Columns generated by the analysis.


    Attributes
    ----------
    CELL_CYCLE_PERC : str
        Unique cell cycle percentage value
    PHASE : str
        Phase of the cell cycle
    """

    CELL_CYCLE_PERC = "CELL_CYCLE_PERC"
    PHASE = "PHASE"
    DISCRETE_PHASE_MAX = "DISCRETE_PHASE_MAX"
    DISCRETE_PHASE_BG = "DISCRETE_PHASE_BG"
    DISCRETE_PHASE_DIFF = "DISCRETE_PHASE_DIFF"

    @staticmethod
    def cell_cycle() -> str:
        """Return the name of the unique intensity column."""
        return NewColumns.CELL_CYCLE_PERC.value

    @staticmethod
    def phase() -> str:
        """Return the name of the phase column."""
        return NewColumns.PHASE.value

    @staticmethod
    def discrete_phase_max() -> str:
        """Return the name of the discrete phase column."""
        return NewColumns.DISCRETE_PHASE_MAX.value

    @staticmethod
    def discrete_phase_bg() -> str:
        """Return the name of the discrete phase column."""
        return NewColumns.DISCRETE_PHASE_BG.value

    @staticmethod
    def discrete_phase_diff() -> str:
        """Return the name of the discrete phase column."""
        return NewColumns.DISCRETE_PHASE_DIFF.value


def generate_cycle_phases(
    df: pd.DataFrame,
    g1_channel: str,
    s_g2_channel: str,
    phases: List[str],
    phase_borders: List[float],
    thresholds: List[float],
) -> None:
    """Add a column in place to the dataframe with the phase of the cell cycle, where
    the phase is determined using a threshold on the cell cycle percentage.

    The thresholds must be between 0 and 1.
    The phase borders must be between 0 and 1.
    Each phase border is the expected percentage for the corresponding phase,
    the last phase will receive the difference to 1 (i.e., 100% of the cell cycle).

    Example:
        phases = ["G1", "S/G1", "SG2M"]
        phase_borders = [0.2, 0.2]
        thresholds = [0.1, 0.1]

    Here, SG2M spans the last 60% of the cell cycle.
    The thresholds mean that all intensities greater than 0.1 times the
    maximum intensity are considered ON.

    The phase borders need to be determined experimentally.
    Possible methods are FACS or analysis of the FUCCI intensities
    of multiple cell cycles recorded by live-cell fluorescence microscopy.

    The thresholds need to be chosen based on the expected noise of the background and
    uncertainty in intensity computation.

    Parameters
    ----------
    df : pd.DataFrame
        Dataframe with columns holding normalized intensities
    g1_channel : str
        First channel labelling the G1 part of the cell cycle
    s_g2_channel : str
        Second channel labelling the remaining part of the cell cycle
    phases : List[str]
        List of phases corresponding to the thresholds
    phase_borders : List[float]
        List of cell cycle percentages per phase, must be between 0 and 1
    thresholds : List[float]
        List of thresholds to determine phase, must be between 0 and 1

    Raises
    ------
    ValueError
        If the number of phases and phase_borders do not match (one more phase expected)
    ValueError
        If the number of thresholds is not 2
    ValueError
        If the phases are not unique
    ValueError
        If the thresholds are not between 0 and 1, one excluded
    """
    # sanity check: check that the normalized channels are present
    for channel in [g1_channel, s_g2_channel]:
        if get_norm_channel_name(channel) not in df.columns:
            raise ValueError(
                f"Column {get_norm_channel_name(channel)} not found, call "
                f"normalize_channel({channel}) on the dataframe."
            )

    # check that the number of phases and thresholds match
    if len(phases) != len(phase_borders) + 1:
        raise ValueError(
            f"There must be one more phase than thresholds (got {len(phases)} for "
            f"{len(phase_borders)} phase borders)."
        )

    # check that the sum of phase borders is less than 1
    if sum(phase_borders) > 1:
        raise ValueError("Phase borders sum to a value greater than 1.")

    # check that the thresholds are between 0 and 1
    if not all(0 < t < 1 for t in phase_borders):
        raise ValueError("Phase borders must be between 0 and 1.")

    # check that all phases are unique
    if len(phases) != len(set(phases)):
        raise ValueError("Phases must be unique.")

    # check that the thresholds are between 0 and 1
    if not all(0 < t < 1 for t in thresholds):
        raise ValueError("Thresholds must be between 0 and 1.")

    # get normalized channel names
    get_norm_channel_name(g1_channel)
    get_norm_channel_name(s_g2_channel)

    # TODO add cell cycle logic


def estimate_cell_phase_from_max_intensity(
    df: pd.DataFrame,
    sensor: FUCCISensor,
    g1_channel: str,
    s_g2_channel: str,
    g1_background: float,
    s_g2_background: float,
    g1_threshold: float,
    s_g2_threshold: float,
) -> None:
    """Add a column in place to the dataframe with the estimated phase of the cell
    cycle, where the phase is determined by thresholding the channel intensities.

    The provided thresholds are used to decide if a channel is switched on (ON).
    For that, the background is subtracted from the mean intensity.
    The obtained values are normalized w.r.t. the maximum mean intensity in the
    respective channel available in the DataFrame.
    Hence, the threshold values should be between 0 and 1.
    This method will not work reliably if not enough cells from different phases
    are contained in the DataFrame.


    Parameters
    ----------
    df: pd.DataFrame
        Dataframe with a CELL_CYCLE_PERC column
    sensor: FUCCISensor
        FUCCI sensor with specific phase analysis information
    g1_channel : str
        First channel indicating G1
    s_g2_channel : str
        Second channel indicating S/G2
    g1_background: float
        Single value representing background of channel
    s_g2_background: float
        Single value representing background of channel
    g1_threshold:
        Threshold to consider G1 channel ON
    s_g2_threshold: float
        Threshold to consider S/G2 channel ON

    Raises
    ------
    ValueError
        If the dataframe does not contain the normalized channels.
    ValueError
        If the thresholds are not between 0 and 1.
    """
    # sanity check: check that channels are present
    for channel in [g1_channel, s_g2_channel]:
        if channel not in df.columns:
            raise ValueError(
                f"Column {channel} not found, provide correct input parameters."
            )
    # check thresholds
    if not 0 < g1_threshold < 1 and not 0 < s_g2_threshold < 1:
        raise ValueError("Provide threshold values between 0 and 1.")

    # get intensities and subtract background
    g1_channel_intensity = df[g1_channel] - g1_background
    s_g2_channel_intensity = df[s_g2_channel] - s_g2_background

    # threshold channels to decide if ON / OFF (data is in list per spot)
    g1_on_channel = g1_channel_intensity > g1_threshold * g1_channel_intensity.max()
    s_g2_on_channel = (
        s_g2_channel_intensity > s_g2_threshold * s_g2_channel_intensity.max()
    )

    # store phases
    phase_names = []
    for g1_on, s_g2_on in zip(g1_on_channel, s_g2_on_channel):
        phase_names.append(sensor.return_discrete_phase([g1_on, s_g2_on]))
    df[NewColumns.discrete_phase_max()] = pd.Series(
        phase_names, dtype=str
    )  # add as str


def estimate_cell_phase_from_background(
    df: pd.DataFrame,
    sensor: FUCCISensor,
    g1_channel: str,
    s_g2_channel: str,
    g1_background: float,
    s_g2_background: float,
    g1_factor: float,
    s_g2_factor: float,
) -> None:
    """Add a column in place to the dataframe with the estimated phase of the cell
    cycle, where the phase is determined by comparing the channel intensities to
    the respective background intensities.

    The provided factors are used to decide if a channel is switched on (ON).
    If the intensity exceeds the background level times the factor, the channel
    is ON. Hence, the factors should be greater than 0.


    Parameters
    ----------
    df: pd.DataFrame
        Dataframe with a CELL_CYCLE_PERC column
    sensor: FUCCISensor
        FUCCI sensor with specific phase analysis information
    g1_channel : str
        First channel indicating G1
    s_g2_channel : str
        Second channel indicating S/G2
    g1_background: float
        Single value representing background of channel
    s_g2_background: float
        Single value representing background of channel
    g1_factor: float
        Factor to consider G1 channel ON
    s_g2_factor: float
        Factor to consider S/G2 channel ON

    Raises
    ------
    ValueError
        If the dataframe does not contain the normalized channels.
    ValueError
        If the factors are not greater than 0.
    """
    # sanity check: check that channels are present
    for channel in [g1_channel, s_g2_channel]:
        if channel not in df.columns:
            raise ValueError(
                f"Column {channel} not found, provide correct input parameters."
            )
    # check thresholds
    if not g1_factor > 0 and not s_g2_factor > 0:
        raise ValueError("Provide factors greater than 0.")

    # get intensities and subtract background
    g1_channel_intensity = df[g1_channel]
    s_g2_channel_intensity = df[s_g2_channel]

    # threshold channels to decide if ON / OFF (data is in list per spot)
    g1_on_channel = g1_channel_intensity > g1_factor * g1_background
    s_g2_on_channel = s_g2_channel_intensity > s_g2_factor * s_g2_background

    # store phases
    phase_names = []
    for g1_on, s_g2_on in zip(g1_on_channel, s_g2_on_channel):
        phase_names.append(sensor.return_discrete_phase([g1_on, s_g2_on]))
    df[NewColumns.discrete_phase_bg()] = pd.Series(phase_names, dtype=str)  # add as str
